-----------------------------------------------------------------
 스프링 DAO(Data Access Object) 
	- 데이터 액세스 계층의 코드 작성을 단순화하고 일관된 데이터 접근 방법을 제공
	- JDBC, ORM(Hibernate, Mybatis, ...), JPA 등의 다양한 데이터 접근 기술  제공
	- JdbcTemplate(단순) 제공
	- ORM(Object Relation Mapping) : 자바객체-테이블 매핑
	- JPA(Java Persistence API) : ORM을 위한 표준 인터페이스
-----------------------------------------------------------------


---------------------------------
DBCP(DB Connection Pool)
---------------------------------
데이터베이스와 연결된 커넥션을 미리 만들어 Pool속에 저장
필요할 때 풀에서 커넥션을 가져다 사용
다 쓴 후에 다시 풀에 반환


---------------------------------
pom.xml에  <repositories> 추가
---------------------------------
	<properties>
		~~~ 생략 ~~~ 
	</properties>
	<repositories>
	    <repository>
	        <id>oracle-repo</id>
	        <url>https://maven.oracle.com</url>
	        <releases>
	            <enabled>true</enabled>
	        </releases>
	    </repository>
	</repositories>
	<dependencies>
		~~~ 생략 ~~~
	</dependencies>


---------------------------------
pom.xml에  <dependency> 추가
---------------------------------
		<!--  DBCP -->
	    <!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/commons-pool/commons-pool -->
		<dependency>
		    <groupId>commons-pool</groupId>
		    <artifactId>commons-pool</artifactId>
		    <version>1.6</version>
		</dependency>
		
	    
	    <!-- mapper 관련 -->	
		<dependency>
		    <groupId>javax.annotation</groupId>
		    <artifactId>javax.annotation-api</artifactId>
		    <version>1.3.2</version>
		</dependency>

		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		<!--  Mybatis-spring  -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency>
		<!-- Spring -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-ibatis</artifactId>
		    <version>2.0.8</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>org.apache.ibatis</groupId>
		    <artifactId>ibatis-sqlmap</artifactId>
		    <version>2.3.4.726</version>
		</dependency>
    	
    	

------------------------------------------------
1. DataSource 설정 방법 :: Java/Web 프로젝트인 경우
 - /webapp/WEB-INF/web.xml
 - tomcat/conf/context.xml
------------------------------------------------
tomcat/conf/context.xml
	<!-- 데이터 리소스 설정 -->  
    <Resource name="MY_tomcat_ds"
              auth="Container"
              type="javax.sql.DataSource"
              maxTotal="30"
              maxIdle="5"
              maxWaitMillis="10000"
              driverClassName="oracle.jdbc.driver.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:XE"
              username="it"
              password="0000"/>
              
   /webapp/WEB-INF/web.xml
   <!-- 데이터 리소스 설정 이름 "MY_tomcat_ds"이 일치해야 함 -->  
		:: context.xml				<Resource name="MY_tomcat_ds"> 
		:: web.xml					<res-ref-name>MY_tomcat_ds</res-ref-name> 		
	<resource-ref>
	    <description>My DataSource TEST</description>
	    <res-ref-name>MY_tomcat_ds</res-ref-name>
	    <res-type>javax.sql.DataSource</res-type>
	    <res-auth>Container</res-auth>
	</resource-ref>
    

------------------------------------------------ ***** 해당 방식 사용
2. DataSource 설정 방법 :: Spring 프로젝트인 경우  
 - /webapp/WEB-INF/web.xml
 - /webapp/WEB-INF/spring/lec08-servlet-context.xml	
 - /src/main/resources/oracle.properties
------------------------------------------------

	oracle.properties 파일 설정 정보
	
	lec.driver=oracle.jdbc.driver.OracleDriver
	lec.url=jdbc:oracle:thin:@localhost:1521:XE
	lec.username=it
	lec.userpw=0000

	
	lec08-servlet-context.xml	
	<!-- datasource : 프로퍼티 파일을 사용한 형태 -->
	<context:property-placeholder location="classpath:oracle.properties" />
	<bean id="MY_tomcat_ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
	    <property name="driverClassName" 	value="${lec.driver}" />
	    <property name="url" 				value="${lec.url}" />
	    <property name="username" 			value="${lec.username}" />
	    <property name="password" 			value="${lec.userpw}" /> 
	</bean>

	<!-- datasource : 하드코딩한 형태
	<bean id="MY_tomcat_ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
	    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	    <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
	    <property name="username" value="it" />
	    <property name="password" value="0000" /> 
	</bean> -->
		
	
	
-----------------------------------------------------------------
 실행 
----------------------------------------------------------------- 		
CtxCallTest.java 
http:localhost:{port}/{context_path}/board_list
	
	
	

#################################################################################

----------------------------------------------------------
*** JdbcTemplate
----------------------------------------------------------
public Post updatePost(Long id, Post updateParam) {
	String sql = "UPDATE post SET title=?, content=?, MODIFIED_DATE=? where id=?";
	template.update(sql, 
    	updateParam.getTitle(), 
        updateParam.getContent(), 
        updateParam.getModifiedDate(),
        id);
}
----------------------------------------------------------
*** JPA
----------------------------------------------------------
import org.springframework.data.jpa.repository.JpaRepository;
public interface UserRepository extends JpaRepository<User, Long> {
	//slect * from user where uname = ?
    List<User> findByName(String name);
}

----------------------------------------------------------
*** ORM (Mybatis)
----------------------------------------------------------
package com.lec09.orm;
public class MemberVO {
    private int id;
    private String name;
    private String email;
    private Date regdate;
    // getters and setters
}

package com.lec09.orm.mapper;
public interface MemberMapper {
    void myMethodName__insert(MemberVO mvo);
}
 
'MemberMapper.xml' 
<mapper namespace="com.lec09.mapper.MemberMapper">
    <insert id="myMethodName__insert" parameterType="com.lec09.orm.MemberVO">
        INSERT INTO member (name, email) VALUES (#{name}, #{email})
    </insert>
</mapper>
 
@Service
public class MemberServiceImpl {
	@Autowired
    private  MemberMapper memberMapper;

    public void addMember(MemberVO prmVO) {
        memberMapper.myMethodName__insert(prmVO);
    }
}

----------------------------------------------------------
*** ORM (Hibernate)
----------------------------------------------------------
@Data
@Table(name = "Member")
@Entity
public class Board implements java.io.Serializable {

    @Id
    @Column(name = "seq")
    @GenenratedValue(strategy = GenerationType.AUTO)
    private int seq;

    @Column(name = "title", nullable = false)
    private String title;

    public Board() {}

    public Board(String title) {
        this.title = title;
    }
}

hibernate-board-mapper.xml

@Temporal(TemporalType.TIME)
private Date playTime;

@Temporal(TemporalType.DATE)
private Date added;


<hibernate-mapping>
    <class name="com.lec09.orm.BoardVO" table="board">
        <meta attribute="class-description">
            Represents a single playable track in the music database.
            @author Jum Elliott (with help from Hibernate)
        </meta>

        <id name="seq" type="int" column="seq">
            <meta attribute="scope-set">protected</meta>
            <generataor class="native">
        </id>

        <property name="title" type="string" not-null="true"/>
    </class>
</hibernate-mapping>

public class ServiceImpl {
	SessionFactory sessionFactory = HibernateUtil5.getSessionFactory();
	SessionFactory session = sessionFactory.openSession();
	Transaction tx = null;
		
	public void svcMethodd() {
		try {
		    tx = session.beginTransaction();	
		    // 쿼리 작성
		    tx.commit();
		} catch (RuntimeException e) {
		    if (tx != null) tx.rollback(); 
		} finally {
		    session.close();
		}
		sessionFactory.close();
	}
}
----------------------------------------------------------

